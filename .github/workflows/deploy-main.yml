name: Deploy Main to Production

on:
  push:
    branches: ['main']

env:
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  infrastructure:
    name: Deploy Production Infrastructure
    runs-on: ubuntu-latest
    environment: production
    outputs:
      ecr-repository: ${{ steps.pulumi-up.outputs.ecrRepositoryName }}
      ecs-cluster: ${{ steps.pulumi-up.outputs.ecsClusterName }}
      ecs-service: ${{ steps.pulumi-up.outputs.ecsServiceName }}
      app-url: ${{ steps.pulumi-up.outputs.appUrl }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v4

      - name: Install Pulumi dependencies
        run: |
          cd infrastructure
          npm install

      - name: Deploy production infrastructure with Pulumi
        id: pulumi-up
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: beta-pokemon-main
          work-dir: infrastructure
          config-map: |
            {
              "domain": "sels-dev.click",
              "branchName": "main",
              "aws:region": "${{ vars.AWS_REGION }}"
            }
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: infrastructure
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build and test
        run: |
          docker compose build app
          echo "Built for production deployment"

      - name: Deploy to ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.infrastructure.outputs.ecr-repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Deploying main to production"

          # Build, tag and push to ECR
          docker compose -f docker-compose.prod.yml build app
          docker tag beta-pokemon-app:release $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag beta-pokemon-app:release $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Force ECS service update to use new image
          aws ecs update-service \
            --cluster ${{ needs.infrastructure.outputs.ecs-cluster }} \
            --service ${{ needs.infrastructure.outputs.ecs-service }} \
            --force-new-deployment \
            --region ${{ vars.AWS_REGION }}
            
          echo "Deployed successfully to production!"
          echo "Your app is available at: ${{ needs.infrastructure.outputs.app-url }}"
