name: Multi-Branch Deploy

on:
  push:
    branches-ignore: ['main'] # Exclude main branch

env:
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      ecr-repository: ${{ steps.pulumi-up.outputs.ecrRepositoryName }}
      ecs-cluster: ${{ steps.pulumi-up.outputs.ecsClusterName }}
      ecs-service: ${{ steps.pulumi-up.outputs.ecsServiceName }}
      app-url: ${{ steps.pulumi-up.outputs.appUrl }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Test AWS credentials
        run: |
          echo "Testing AWS credentials..."
          aws sts get-caller-identity
          echo "AWS Region: ${{ vars.AWS_REGION }}"
          aws ec2 describe-regions --filters "Name=region-name,Values=${{ vars.AWS_REGION }}"

      - name: Setup Pulumi CLI
        uses: pulumi/actions@v4

      - name: Install Pulumi dependencies
        run: |
          cd infrastructure
          npm install

      - name: Deploy staging infrastructure with Pulumi
        id: pulumi-up
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: beta-pokemon-${{ github.ref_name }}
          work-dir: infrastructure
          upsert: true
          config-map: |
            {
              "domain": "sels-dev.click",
              "branchName": "${{ github.ref_name }}",
              "aws:region": "eu-north-1"
            }
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: infrastructure

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine deployment type
        id: deploy-type
        run: |
          if [[ "${{ github.ref_name }}" == "staging" ]]; then
            echo "deploy-to-ecs=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "ecr-repo=${{ needs.infrastructure.outputs.ecr-repository }}" >> $GITHUB_OUTPUT
          else
            echo "deploy-to-ecs=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "ecr-repo=${{ needs.infrastructure.outputs.ecr-repository }}" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        if: steps.deploy-type.outputs.deploy-to-ecs == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.deploy-type.outputs.deploy-to-ecs == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build and test (all branches)
        run: |
          docker compose build app
          echo "Built for branch: ${{ github.ref_name }}"

      - name: Deploy to ECS (main/staging only)
        if: steps.deploy-type.outputs.deploy-to-ecs == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.deploy-type.outputs.ecr-repo }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Deploying ${{ github.ref_name }} to ${{ steps.deploy-type.outputs.environment }}"

          # Build, tag and push to ECR
          docker compose -f docker-compose.prod.yml build app
          docker tag beta-pokemon-app:release $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag beta-pokemon-app:release $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Force ECS service update to use new image
          aws ecs update-service \
            --cluster ${{ needs.infrastructure.outputs.ecs-cluster }} \
            --service ${{ needs.infrastructure.outputs.ecs-service }} \
            --force-new-deployment \
            --region ${{ vars.AWS_REGION }}

          echo "Deployed successfully to ${{ steps.deploy-type.outputs.environment }}!"
          echo "Your app is available at: ${{ needs.infrastructure.outputs.app-url }}"
